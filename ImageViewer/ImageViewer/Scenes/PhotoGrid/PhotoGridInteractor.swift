//
//  PhotoGridInteractor.swift
//  ImageViewer
//
//  Created by Zakhar Sukhanov on 2017-12-09.
//  Copyright (c) 2017 Zakhar Sukhanov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import UnsplashKit

protocol PhotoGridBusinessLogic
{
  func doWithdrawPhotos(request: PhotoGrid.Request)
}

protocol PhotoGridDataStore
{
  var photos: [Photo] { get }
}

class PhotoGridInteractor: PhotoGridBusinessLogic, PhotoGridDataStore
{
  var presenter: PhotoGridPresentationLogic?
  
  var photos = [Photo]()
  
  // MARK: Do something
  
  func doWithdrawPhotos(request: PhotoGrid.Request)
  {
    guard let token = Settings.shared.token else {
      presenter?.presentError(error: PhotoGrid.Error(error: IVError(desc: "TOKEN IS NOT AVAILABLE")))
      return
    }
    
    let client = UnsplashClient { request -> [String: String] in
      return [ "Authorization": "Bearer \(token)"]
    }
    
    let photos = Photo.list(page: 1, perPage: 30, orderBy: .latest)
    client.execute(resource: photos) { (result) in
      guard nil == result.error else {
        self.presenter?.presentError(error: PhotoGrid.Error(error: IVError(desc: result.error!.description)))
        return
      }
      
      guard let photos = result.value?.object else {
        self.presenter?.presentError(error: PhotoGrid.Error(error: IVError(desc: "No available photos")))
        return
      }
      
      self.photos = photos
      self.presenter?.presentPhotos(response: PhotoGrid.Response(photos: photos))
      
//      for var item in (result.value?.object)! {
//          print(item)
//      }
      
    }
//    let response = PhotoGrid.Response()
//    presenter?.presentSomething(response: response)
  }
}
