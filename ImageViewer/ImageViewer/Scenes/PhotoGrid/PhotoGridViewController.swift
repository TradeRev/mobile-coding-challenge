//
//  PhotoGridViewController.swift
//  ImageViewer
//
//  Created by Zakhar Sukhanov on 2017-12-09.
//  Copyright (c) 2017 Zakhar Sukhanov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import UnsplashKit
import PagedArray
import GreedoLayout

protocol PhotoGridDisplayLogic: class
{
  func displayRefresh(_ indexes: CountableRange<Int>)
  func displayError(_ error: PhotoGrid.Error)
}


class PhotoGridViewController: UICollectionViewController, PhotoGridDisplayLogic
{
  var interactor: PhotoGridBusinessLogic?
  var router: (NSObjectProtocol & PhotoGridRoutingLogic & PhotoGridDataPassing)?

  
  fileprivate let itemsPerRow: CGFloat = 2
  fileprivate let sectionInsets = UIEdgeInsets(top: 10.0, left: 10.0, bottom: 10.0, right: 10.0)
  
  //fileprivate var greedoLayout: GreedoCollectionViewLayout? = nil
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = PhotoGridInteractor()
    let presenter = PhotoGridPresenter()
    let router = PhotoGridRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
//    greedoLayout = GreedoCollectionViewLayout(collectionView: self.collectionView)
//    greedoLayout?.dataSource = self
    
//    let layout = UICollectionViewFlowLayout()
//    layout.minimumInteritemSpacing = 5.0;
//    layout.minimumLineSpacing = 5.0;
//    layout.sectionInset = UIEdgeInsetsMake(10.0, 5.0, 5.0, 5.0);
//
//    collectionView?.collectionViewLayout = layout
    
    doWithdrawPhotos()
  }
  
  // MARK: Do something
  
  func doWithdrawPhotos()
  {
    let request = PhotoGrid.Request()
    interactor?.doWithdrawPhotos(request: request)
  }
  
  // MARK: PhotoGridDisplayLogic
  
  func displayRefresh(_ indexes: CountableRange<Int>) {
    collectionView?.reloadData()
  }
  
  
  func displayError(_ error: PhotoGrid.Error) {
    self.displayError(error.error.description)
  }
  
  // MARK: UICollectionViewDataSource
  
  override func numberOfSections(in collectionView: UICollectionView) -> Int {
    return 1
  }
  
  
  override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    return router?.dataStore?.photos?.count ?? 0
  }
  
  
  override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    interactor?.doLoadPhotosIfNeededForRow(request: PhotoGrid.LoadDataRequet(row: indexPath.row))
    
    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "PhotoCellID", for: indexPath) as! PhotoCell
    if let photo = router?.dataStore?.photos?[indexPath.row] {
      cell.configureCell(with: photo.urls!.small, placeholderImage: UIImage())
    } else {
      Log.error("CAN\'T ACCESS PHOTO DATA, WHEN IT SUPPOSED TO BE AVAILABLE")
    }
    
    return cell
  }
  
  // MARK: UICollectionViewDelegate
  
  override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    router?.routeToParticularPhoto(indexPath)
  }
}


extension PhotoGridViewController : UICollectionViewDelegateFlowLayout/*, GreedoCollectionViewLayoutDataSource*/ {
  
//  func greedoCollectionViewLayout(_ layout: GreedoCollectionViewLayout!, originalImageSizeAt indexPath: IndexPath!) -> CGSize {
//    if indexPath.row < (router?.dataStore?.photos?.count)! {
//      if let photo = router?.dataStore?.photos?[indexPath.row] {
//        return CGSize(width: photo.width, height: photo.height)
//      }
//    }
//    return CGSize(width: 0.1, height: 0.1)
//  }
//
//
//  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
//    return greedoLayout!.sizeForPhoto(at: indexPath)
//  }
  
  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
    let paddingSpace = sectionInsets.left * (itemsPerRow + 1)
    let availableWidth = view.frame.width - paddingSpace
    let widthPerItem = availableWidth / itemsPerRow
    
    return CGSize(width: widthPerItem, height: widthPerItem)
  }
  

  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
    return sectionInsets
  }
  

  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
    return sectionInsets.left
  }
}
