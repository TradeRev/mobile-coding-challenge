//
//  ParticularPhotoInteractor.swift
//  ImageViewer
//
//  Created by Zakhar Sukhanov on 2017-12-10.
//  Copyright (c) 2017 Zakhar Sukhanov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import UnsplashKit
import PagedArray

protocol ParticularPhotoBusinessLogic
{
  func doGetNextPhoto() -> Photo?
  func doGetPreviousPhoto() -> Photo?
  func doGetCurrentPhoto() -> Photo?
}

protocol ParticularPhotoDataStore
{
  var photoStorage: PhotoDataStorage? { get set }
  var currentIndex: Int? { get set }
}

class ParticularPhotoInteractor: ParticularPhotoBusinessLogic, ParticularPhotoDataStore
{
  var presenter: ParticularPhotoPresentationLogic?
  
  var photoStorage: PhotoDataStorage?
  var currentIndex: Int?
  
  // MARK: ParticularPhotoBusinessLogic
  
  func doGetNextPhoto() -> Photo? {
    guard var idx = currentIndex else {
      return nil
    }

    if let photoCount = photoStorage?.photos?.count {
      if idx < photoCount - 1 {
        idx = idx + 1
        
        photoStorage?.loadPhotosIfNeededForIndex(idx)
        currentIndex = idx
        return photoStorage?.photos?[idx]
      }
    }
    
    return nil
  }
  
  func doGetPreviousPhoto() -> Photo? {
    guard var idx = currentIndex else {
      return nil
    }
    
    if idx > 0 {
      idx = idx - 1
      
      photoStorage?.loadPhotosIfNeededForIndex(idx)
      currentIndex = idx
      return photoStorage?.photos?[idx]
    }
    return nil
  }
  
  func doGetCurrentPhoto() -> Photo? {
    guard let idx = currentIndex else {
      return nil
    }

    photoStorage?.loadPhotosIfNeededForIndex(idx)
    return photoStorage?.photos?[idx]
  }
}
