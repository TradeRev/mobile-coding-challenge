//
//  ParticularPhotoViewController.swift
//  ImageViewer
//
//  Created by Zakhar Sukhanov on 2017-12-10.
//  Copyright (c) 2017 Zakhar Sukhanov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import UnsplashKit
import AlamofireImage

protocol ParticularPhotoDisplayLogic: class
{
  func displaySomething(viewModel: ParticularPhoto.ViewModel)
}

class ParticularPhotoViewController: UIViewController, ParticularPhotoDisplayLogic
{
  var interactor: ParticularPhotoBusinessLogic?
  var router: (NSObjectProtocol & ParticularPhotoRoutingLogic & ParticularPhotoDataPassing)?

  @IBOutlet weak var photoImage: UIImageView!
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ParticularPhotoInteractor()
    let presenter = ParticularPhotoPresenter()
    let router = ParticularPhotoRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    let swipeLeft = UISwipeGestureRecognizer(target: self, action: #selector(handleGesture))
    swipeLeft.direction = .left
    self.view.addGestureRecognizer(swipeLeft)
    
    let swipeRight = UISwipeGestureRecognizer(target: self, action: #selector(handleGesture))
    swipeRight.direction = .right
    self.view.addGestureRecognizer(swipeRight)
    
    if let photo = interactor?.doGetCurrentPhoto() {
      showPhoto(photo)
    }
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func displaySomething(viewModel: ParticularPhoto.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
  
  // MARK: Private
  
  @objc fileprivate func handleGesture(gesture: UISwipeGestureRecognizer) -> Void {
    if gesture.direction == UISwipeGestureRecognizerDirection.right {
      if let photo = interactor?.doGetPreviousPhoto() {
        self.photoImage.leftRightAnimation(toRight: false)
        showPhoto(photo)
      }
    }
    else if gesture.direction == UISwipeGestureRecognizerDirection.left {
      if let photo = interactor?.doGetNextPhoto() {
        self.photoImage.leftRightAnimation(toRight: true)
        showPhoto(photo)
      }
    }
  }
  
  fileprivate func showPhoto(_ photo: Photo) {
    if let fullURL = photo.urls?.full {
      photoImage.af_setImage(withURL: URL(string: fullURL)!, placeholderImage: UIImage(), imageTransition: .crossDissolve(0.2))
    }
  }
}

extension UIView {
  func leftRightAnimation(toRight: Bool, duration: TimeInterval = 0.5, completionDelegate: AnyObject? = nil) {
    
    let leftToRightTransition = CATransition()
    
    if let delegate: AnyObject = completionDelegate {
      leftToRightTransition.delegate = delegate as? CAAnimationDelegate
    }
    
    leftToRightTransition.type = kCATransitionPush
    leftToRightTransition.subtype = toRight ? kCATransitionFromRight : kCATransitionFromLeft
    leftToRightTransition.duration = duration
    leftToRightTransition.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
    leftToRightTransition.fillMode = kCAFillModeRemoved
    
    self.layer.add(leftToRightTransition, forKey: "leftToRightTransition")
  }
}
